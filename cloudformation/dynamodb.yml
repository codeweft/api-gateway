AWSTemplateFormatVersion: 2010-09-09

Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Database

Resources:
  SNSTopicEmail:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        - Endpoint: "harshad2019@wankhede.org" # PUT YOUR EMAIL ADDRESS HERE
          Protocol: "email"
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: "*"
              - Effect: Allow
                Action:
                  - SNS:Publish
                Resource: "*"
  SNSPublishFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          var AWS = require('aws-sdk');
          var sns = new AWS.SNS();
          const snsTopic =process.env.SNSARN;
          exports.handler = (event, context, callback) => {
            event.Records.forEach((record) => {
                console.log('Stream record: ', JSON.stringify(record, null, 2));

                if (record.eventName == 'INSERT') {
                    var source = JSON.stringify(record.dynamodb.eventSourceARN);
                    var time = JSON.stringify(record.dynamodb.ApproximateCreationDateTime);
                    var data = JSON.stringify(record.dynamodb.NewImage);
                    var params = {
                        Subject: 'Message from SNS Topic',
                        Message: 'Message from ' + source + ' at time ' + time + ' with data:\n\n ' + data,
                        TopicArn: snsTopic
                    };
                    sns.publish(params, function(err, data) {
                        if (err) {
                            console.error("Unable to send message. Error JSON:", JSON.stringify(err, null, 2));
                        } else {
                            console.log("Results from sending message: ", JSON.stringify(data, null, 2));
                        }
                    });
                }
            });
            callback(null, `Successfully processed ${event.Records.length} records.`);
          };
      Handler: index.handler
      Role:
        Fn::GetAtt: [ LambdaRole , Arn ]
      Runtime: "nodejs8.10"
      Timeout: 300
      Environment:
        Variables:
          SNSARN: !Ref SNSTopicEmail
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DatabaseName
      AttributeDefinitions:
        - AttributeName: team
          AttributeType: S
      KeySchema:
        - AttributeName: team
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  DataTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn:
        Fn::GetAtt: [ DynamoDBTable , StreamArn ]
      FunctionName:
        Fn::GetAtt: [ SNSPublishFunction , Arn ]
      StartingPosition: LATEST